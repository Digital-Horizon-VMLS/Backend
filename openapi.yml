openapi: 3.1.0
info:
  title: Anonymous Roulette API
  version: 0.1.0
paths:
  /api/tokens:
    post:
      summary: Get access/refresh tokens for posted user.
      tags:
        - Tokens
      requestBody:
        description: Information to identify requesting user.
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - schema:
                  type: object
                  title: User ID
                  properties:
                    user_id:
                      type: integer
                      example: 1
                  required:
                    - user_id
                - schema:
                  type: object
                  title: Request Token
                  properties:
                    request_token:
                      type: string
                      example: eyJhbGc2OiJIUVUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJhbm9uX3JvdWxldHRlIiwiZXhwIjoxNzMyOTE3NDA2LCJpYXQiOjE3MDE0Njc4MDYsImlzcyI6ImFub25fcm91bGV0dGUiLCJqdGkiOiIzN2NlODFlNS0xZGVhLTRlNTAtYTI5MS0wNzZlYzE2NmExZDEiLCJuYmYiOjE3MDE0Njc4MDUsInN1YiI6IjEiLCJ0eXAiOiJyZWZyZXNoIn0.tH3Gwkb4J_X2UQraoAi1PxAmMpadHwgNUyypGdoslXANM9gLPN4KZK92EW4v9O4lqNui182FiV2TjJMqGOz_6w
                  required:
                    - request_token
      responses:
        '201':
          description: Sucessfully created tokens.
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/Access Token'
                  - $ref: '#/components/schemas/Access and Refresh Token'
        '401':
          $ref: '#/components/responses/401Unauthenticated'
  /api/categories:
    get:
      summary: Get a list of categories.
      tags:
        - Categories
      responses:
        '200':
          description: Successfuly retrieved a list of categories.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Category'
  /api/categories/{category_id}:
    parameters:
      - name: "category_id"
        in: path
        required: true
        description: ID of the category.
        schema:
          type: integer
    get:
      summary: Get a category by their ID.
      tags:
        - Categories
      responses:
        '200':
          description: Successfuly retrieved a category by their ID.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Category'
  /api/ethnicities:
    get:
      summary: Get a list of ethnicities.
      tags:
        - Ethnicities
      responses:
        '200':
          description: Successfuly retrieved a list of ethnicities.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Ethnicity'
  /api/ethnicities/{ethnicity_id}:
    parameters:
      - name: "ethnicity_id"
        in: path
        required: true
        description: ID of the ethnicity.
        schema:
          type: integer
    get:
      summary: Get a ethnicity by their ID.
      tags:
        - Ethnicities
      responses:
        '200':
          description: Successfuly retrieved a ethnicity by their ID.
          content:
            application/json:
              schema:
                type: object
                $ref: '#/components/schemas/Ethnicity'
  /api/users:
    post:
      summary: Create a user.
      tags:
        - Users
      requestBody:
        description: Username and password for the new user.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: johntheanon
                email:
                  type: string
                  example: johndoe@email.com
              required:
                - username
                - email
      responses:
        '200':
          description: Successfuly created a user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /api/users/{user_id}:
    parameters:
      - name: "user_id"
        in: path
        required: true
        description: ID of the user.
        schema:
          type: integer
    get:
      summary: Get a user by their ID.
      security:
        - BearerAuth: []
      tags:
        - Users
      responses:
        '200':
          description: Successfuly retrieved a user by their ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          $ref: '#/components/responses/401Unauthenticated'
        '403':
          $ref: '#/components/responses/403Unauthorized'
    delete:
      summary: Delete a user by their ID.
      security:
        - BearerAuth: []
      tags:
        - Users
      responses:
        '204':
          description: Successfuly deleted a user by their ID.
        '401':
          $ref: '#/components/responses/401Unauthenticated'
        '403':
          $ref: '#/components/responses/403Unauthorized'
    patch:
      summary: Update a user by their ID.
      security:
        - BearerAuth: []
      tags:
        - Users
      requestBody:
        description: User information to update.
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: johnthenew@update.com
                description:
                  type: string
                  example: Hey, friends! I'm Johnathan Doeman, your friendly neighborhood enthusiast of all things life has to offer.
                firstName:
                  type: string
                  example: Johnathan
                lastName:
                  type: string
                  example: Doeman
                birthDate:
                  type: string
                  format: date
                  example: 2002-02-02
                ethnicity:
                  type: integer
                  example: 2
                anonymous:
                  type: boolean
                  example: false
      responses:
        '204':
          description: Successfuly updated a user by their ID.
        '401':
          $ref: '#/components/responses/401Unauthenticated'
        '403':
          $ref: '#/components/responses/403Unauthorized'
  /api/friends:
    get:
      summary: Get a list of friends.
      security:
        - BearerAuth: []
      tags:
        - Friends
      responses:
        '200':
          description: Successfuly retrieved a list of friends.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Friend'
  /api/friends/{friend_id}:
    parameters:
      - name: "friend_id"
        in: path
        required: true
        description: ID of the friend.
        schema:
          type: integer
    get:
      summary: Get a friend by their ID.
      security:
        - BearerAuth: []
      tags:
        - Friends
      responses:
        '200':
          description: Successfuly retrieved a friend by their ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friend'
    delete:
      summary: Remove a friend by their ID.
      security:
        - BearerAuth: []
      tags:
        - Friends
      responses:
        '204':
          description: Successfuly removed a friend by their ID.
  /api/friend-requests:
    get:
      summary: Get a list of friend requests.
      security:
        - BearerAuth: []
      tags:
        - Friend Requests
      responses:
        '200':
          description: Successfuly retrieved a list of friend requests.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Friend Request'
    post:
      summary: Create a friend request.
      security:
        - BearerAuth: []
      tags:
        - Friend Requests
      requestBody:
        description: User ID of the recipient and message for the friend request.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                recipient:
                  type: integer
                  example: 2
                message:
                  type: string
                  example: "I noticed we're into some similar stuff. You are awesome, and I thought it'd be cool to connect! ðŸ˜Š"
              required:
                - recipient
      responses:
        '200':
          description: Successfuly created a friend request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friend Request'
  /api/friend_requests/{friend_request_id}:
    parameters:
      - name: "friend_request_id"
        in: path
        required: true
        description: ID of the friend request.
        schema:
          type: integer
    get:
      summary: Get a friend request by their ID.
      security:
        - BearerAuth: []
      tags:
        - Friend Requests
      responses:
        '200':
          description: Successfuly retrieved a friend request by their ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Friend Request'
    patch:
      summary: Update a friend request by their ID.
      security:
        - BearerAuth: []
      tags:
        - Friend Requests
      requestBody:
        description: New status for friend request.
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  example: REJECTED
              required:
                - status
      responses:
        '204':
          description: Successfuly updated a friend request by their ID.
  /api/reports:
    post:
      summary: Report a user.
      security:
        - BearerAuth: []
      tags:
        - Reports
      requestBody:
        description: User ID of offender and message describing offense.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                offender:
                  type: integer
                  example: 3
                message:
                  type: string
                  example: Reaching out about a persistent annoyance who's been flooding me with relentless and irritating messages.
              required:
                - offender
                - message
      responses:
        '204':
          description: Successfuly reported a user.
components:
  schemas:
    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Sports
    Ethnicity:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: African American
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: johntheanon
        email:
          type: string
          example: johndoe@email.com
        profilePicture:
          type: string
          example: https://upload.wikimedia.org/wikipedia/commons/thumb/5/50/John_and_Jane_Doe_Headstones.jpg
        description:
          type: string
          example: Hey there! I'm John, your friendly neighborhood explorer. By day, I'm immersed in the world of technology, and by night, I'm chasing sunsets and new experiences. Music is my therapy, and I believe a good playlist can change your mood in an instant.
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Doe
        birthDate:
          type: string
          format: date
          example: 2000-01-01
        ethnicity:
          type: string
          example: African American
        anonymous:
          type: boolean
          example: true
    Friend:
      type: object
      properties:
        id:
          type: integer
          example: 2
        username:
          type: string
          example: janethevisible
        email:
          type: string
          example: janedoe@email.com
        profilePicture:
          type: string
          example: https://en.wikipedia.org/wiki/Jane_(given_name)#/media/File:Streathamladyjayne.jpg
        description:
          type: string
          example: Hey, lovely souls! I'm Jane, your friendly neighborhood dreamer with a heart full of wanderlust. By day, you can find me lost in the pages of a good book, and by night, I'm chasing sunsets and stargazing.
        firstName:
          type: string
          example: Jane
        lastName:
          type: string
          example: Doe
        birthDate:
          type: string
          format: date
          example: 1994-02-03
        ethnicity:
          type: string
          example: Hispanic
    Friend Request:
      type: object
      properties:
        id:
          type: integer
          example: 1
        message:
          type: string
          example: "I noticed we're into some similar stuff. You are awesome, and I thought it'd be cool to connect! ðŸ˜Š"
        status:
          type: string
          example: ACCEPTED
        recipient:
          type: integer
          example: 2
        sender:
          type: integer
          example: 1
        sentDate:
          type: string
          format: date
          example: 2023-02-11
    Access Token:
      type: object
      properties:
        token_type:
          type: string
          example: Bearer
        access_token:
          type: string
          example: eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJhbm9uX3JvdWxldHRlIiwiZXhwIjoxNzAxNDY4MTA2LCJpYXQiOjE3MDE0Njc4MDYsImlzcyI6ImFub25fcm91bGV0dGUiLCJqdGkiOiIzMWNhYWE2NS1iNzY0LTRhMmItOTI4MC1mMDJjOTMwNTBkZjciLCJuYmYiOjE3MDE0Njc4MDUsInN1YiI6IjEiLCJ0eXAiOiJhY2Nlc3MifQ.ckOOqsQU393Pp3OYJWyb7I6qhTt3pBVxNdSdchCAk-iXcNx64yvee2UKFFubOXJSwJptwBKWhU_2tbdTE2u4ag
        access_expires_in:
          type: integer
          example: 1601268306
    Access and Refresh Token:
      type: object
      properties:
        token_type:
          type: string
          example: Bearer
        access_token:
          type: string
          example: eyJhbGciOiJIULUxMiIsInRncCI6IkpXVCJ9.eyJhdWQiOiJhbm9uX3JvdWxldHR9IiwiZXhwIjoxNzAxNCY4NzM1LCJpYXQiOjE3MDE0Njg0MzUsImlzcyI6ImFub25fcm91bGV0dGUiLCJqdGkiOiJiODZmMWQ1NC04MDljLTRkYjAtYmRlOC0wNDMxYWRlYzIwNDciLCJuYmYiOjE3MDE0Njg0MzQsInN1YiI6IjEiLCJ0eXAiOiJhY2Nlc3MifQ.8GBI6pudxbXAqE37XFpFYPAEhIUx6gN2UpiMEghBpfDgT5kgSkDavbQWQnVJDKfWVBnjaAxPT2nGdyx4i9xGLw
        access_expires_in:
          type: integer
          example: 1701468735
        refresh_token:
          type: string
          example: eyJhbGciOiJIUzUxMiIsInR5cCI6IkpXVCJ9.eyJhdWQiOiJhbm9uX3JvdWxldHRlIiwiZXhwIjoxNzMyOTE4MDM1LCJpYXQiOjE3MDE0Njg0MzUsImlzcyI6ImFub25fcm91bGV0dGUiLCJqdGkiOiIyZGUxNWVkNy05NmMzLTQ4ZTQtYTJiNS1mMGU1MjI1NWQxYzgiLCJuYmYiOjE3MDE0Njg0MzQsInN1YiI6IjEiLCJ0eXAiOiJyZWZyZXNoIn7.prA97lyNjJe_LTRhhnPRiUDSoH7laVE9H8f4-xAPrXjzxRf5oyMYm6A-n_uXAi2xX_KlKBNfSsdmg4R92ZeHBA
        refresh_expires_in:
          type: integer
          example: 1732918035
  responses:
    401Unauthenticated:
      description: Cannot identify user of request.
    403Unauthorized:
      description: Requesting user does not have permission to access resource.
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
